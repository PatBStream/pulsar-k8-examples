#
#  Copyright 2022 DataStax, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
#

# Enable TLS for the entire cluster and use cert-manager to provision self-signed certificates
tls:
  enabled: true
 # Enable generation of self-signed certs for each component:
  zookeeper:
    generate: true
    enabled: true
  broker:
    generate: true
    enabled: true
  bookkeeper:
    generate: true
    enabled: true
  autorecovery:
    generate: true
    enabled: true
  proxy:
    generate: true
    enabled: true
  functionsWorker:
    generate: true
    enabled: true
certs:
  internal_issuer:
    apiVersion: cert-manager.io/v1
    enabled: true
    component: internal-cert-issuer
    # The type of issuer, supports selfsigning and ca
    type: selfsigning
    # 90d
    duration: 2160h
    # 15d
    renewBefore: 360h
  issuers:
    # Used for certs.type as selfsigning, the selfsigned issuer has no dependency on any other resource.
    selfsigning:
    # used for certs.type as ca, the CA issuer needs to reference a Secret which contains your CA certificate and signing private key.
    ca:
      secretName:
## deployed withh emptyDir
volumes:
  persistence: false

# disabled AntiAffinity
affinity:
  anti_affinity: false
  
## Components
##
## Control what components of Apache Pulsar to deploy for the cluster
components:
  # zookeeper
  zookeeper: true
  # bookkeeper
  bookkeeper: true
  # bookkeeper - autorecovery
  autorecovery: false
  # broker
  broker: true
  # functions
  functions: true
  # proxy
  proxy: true
  # toolset
  toolset: true
  # pulsar manager
  pulsar_manager: false

image:
  broker:
    # If not using tiered storage, you can use the smaller pulsar image for the broker
    repository: apachepulsar/pulsar
    pullPolicy: IfNotPresent
    tag: 4.0.2
  brokerSts:
    # If not using tiered storage, you can use the smaller pulsar image for the broker
    repository: apachepulsar/pulsar
    pullPolicy: IfNotPresent
    tag: 4.0.2
  function:
    repository: apachepulsar/pulsar
    pullPolicy: IfNotPresent
    tag: 4.0.2
  zookeeper:
    repository: apachepulsar/pulsar
    pullPolicy: IfNotPresent
    tag: 4.0.2
  bookkeeper:
    repository: apachepulsar/pulsar
    pullPolicy: IfNotPresent
    tag: 4.0.2
  proxy:
    repository: apachepulsar/pulsar
    pullPolicy: IfNotPresent
    tag: 4.0.2
  toolset:
    repository: apachepulsar/pulsar
    pullPolicy: IfNotPresent
    tag: 4.0.2
  pulsar_manager:
    repository: apachepulsar/pulsar-manager
    pullPolicy: IfNotPresent
    tag: 0.4.0

zookeeper:
  replicaCount: 1
  resources:
    requests:
      memory: 300Mi
      cpu: 0.3
  configData:
    PULSAR_MEM: "-Xms300m -Xmx300m -Djute.maxbuffer=10485760 -XX:+ExitOnOutOfMemoryError"

bookkeeper:
  replicaCount: 1
  resources:
    requests:
      memory: 512Mi
      cpu: 0.3
  configData:
    BOOKIE_MEM: "-Xms312m -Xmx312m -XX:MaxDirectMemorySize=200m -XX:+ExitOnOutOfMemoryError"

broker:
  component: broker
  replicaCount: 1
  ledger:
    defaultEnsembleSize: 1
    defaultAckQuorum: 1
    defaultWriteQuorum: 1
  resources:
    requests:
      memory: 600Mi
      cpu: 0.3
  configData:
    PULSAR_MEM: "-Xms400m -Xmx400m -XX:MaxDirectMemorySize=200m -XX:+ExitOnOutOfMemoryError"

autoRecovery:
  resources:
    requests:
      memory: 300Mi
      cpu: 0.3

function:
  replicaCount: 1
  functionReplicaCount: 1
  resources:
    requests:
      memory: 512Mi
      cpu: 0.3
  configData:
    PULSAR_MEM: "-Xms312m -Xmx312m -XX:MaxDirectMemorySize=200m -XX:+ExitOnOutOfMemoryError"

proxy:
  replicaCount: 1
  resources:
    requests:
      memory: 512Mi
      cpu: 0.3
  wsResources:
    requests:
      memory: 512Mi
      cpu: 0.3
  configData:
    PULSAR_MEM: "-Xms400m -Xmx400m -XX:MaxDirectMemorySize=112m"
  autoPortAssign:
    enablePlainTextWithTLS: true
  service:
    autoPortAssign:
      enabled: true

pulsar_manager:
  replicaCount: 1
  enabled: true
  service:
    type: NodePort
  configData:
    ENV_SPRING_CONFIGURATION_FILE: "/pulsar-manager/pulsar-manager/application.properties"
    SPRING_CONFIGURATION_FILE: "/pulsar-manager/pulsar-manager/application.properties"
    PULSAR_MANAGER_OPTS: " -Dlog4j2.formatMsgNoLookups=true"

## Images
##
## Control what image to use for Pulsar init containers
pulsar_metadata:
  component: pulsar-init
  image:
    repository: apachepulsar/pulsar-all
    tag: 4.0.2
    pullPolicy: IfNotPresent

### Monitoring Components
##
## Control what components of the kube-prometheus-stack Helm chart to deploy for the cluster
kube-prometheus-stack:
  # Control deployment of this Helm chart entirely
  enabled: true
  # prometheus
  prometheus:
    enabled: true
  promtheus-node-exporter:
    enabled: true
  # grafana
  grafana:
    enabled: true
    adminPassword: admin
